generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MessageType {
  TEXT
  AUDIO
  IMAGE
  VIDEO
  SYSTEM
}

enum CallType {
  NONE
  AUDIO
  VIDEO
}

enum CallStatus {
  NONE
  RINGING
  ONGOING
  ENDED
  MISSED
  REJECTED
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum VideoCallStatus {
  INITIATED
  ONGOING
  COMPLETED
  MISSED
}

enum NotificationType {
  MATCH_REQUEST
  MATCH_ACCEPTED
  MATCH_REJECTED
  GENERAL
  EVENT_INVITATION
  TOURNAMENT_INVITATION
}

model User {
  user_id         Int       @id @default(autoincrement())
  username        String
  email           String    @unique
  password          String?
  auth_provider     String?
  auth_provider_id  String?
  location        String?
  profile_picture String?
  skill_level     String?
  rating          Float?
  points          Int       @default(0)
  birthdate       DateTime? 
  phone_number    String?
  phone_country_code String?

  created_teams      Team[]          @relation("TeamCreator")
  team_memberships   TeamMember[]
  created_tournaments Tournament[]    @relation("TournamentCreator")
  created_events     Event[]         @relation("EventCreator")
  event_participations EventParticipant[]
  sports            UserSport[]
  calendar_events   Calendar[]
  chat_memberships  ChatMember[]
  sent_messages     Message[]        @relation("MessageSender")
  achievements      Achievement[]
  cart              Cart?
  favorites         Favorite[]       // Add this new relation
  reports_received  Report[]         @relation("ReportsReceived")
  reports_sent      Report[]         @relation("ReportsSent")
  points_logs       PointsLog[]
  notifications     Notification[]   @relation("UserNotifications")
  matches_as_user_1   Match[]        @relation("User1Matches")
  matches_as_user_2   Match[]        @relation("User2Matches")
  initiated_chats     Chat[]         @relation("ChatInitiator")

  // New relationships for video calls
  initiated_calls     VideoCall[]    @relation("CallInitiator")
  received_calls      VideoCall[]    @relation("CallParticipant")
}

model Sport {
  sport_id    Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?  

  users       UserSport[]
  teams       Team[]
  tournaments Tournament[]
  matches     Match[]
  products    MarketplaceProduct[] // New relation to products
}

model UserSport {
  user_sport_id Int   @id @default(autoincrement())
  user_id       Int
  sport_id      Int

  user  User  @relation(fields: [user_id], references: [user_id])
  sport Sport @relation(fields: [sport_id], references: [sport_id])

  @@index([user_id, sport_id])
}

model Team {
  team_id     Int      @id @default(autoincrement())
  team_name   String
  sport_id    Int
  created_by  Int

  sport       Sport    @relation(fields: [sport_id], references: [sport_id])
  creator     User     @relation("TeamCreator", fields: [created_by], references: [user_id])
  members     TeamMember[]
  tournaments TournamentTeam[]

  @@index([sport_id])
  @@index([created_by])
}

model TeamMember {
  team_member_id Int      @id @default(autoincrement())
  team_id        Int
  user_id        Int
  role           String
  joined_at      DateTime @default(now())

  team Team @relation(fields: [team_id], references: [team_id])
  user User @relation(fields: [user_id], references: [user_id])

  @@index([team_id, user_id])
}

model Tournament {
  tournament_id    Int        @id @default(autoincrement())
  tournament_name  String
  sport_id        Int
  created_by      Int
  start_date      DateTime
  end_date        DateTime
  point_reward    Int

  sport           Sport      @relation(fields: [sport_id], references: [sport_id])
  creator         User       @relation("TournamentCreator", fields: [created_by], references: [user_id])
  teams           TournamentTeam[]

  @@index([sport_id])
  @@index([created_by])
}

model TournamentTeam {
  tournament_team_id Int   @id @default(autoincrement())
  tournament_id      Int
  team_id           Int

  tournament Tournament @relation(fields: [tournament_id], references: [tournament_id])
  team       Team       @relation(fields: [team_id], references: [team_id])

  @@index([tournament_id, team_id])
}

model Event {
  event_id       Int      @id @default(autoincrement())
  event_name     String
  location       String
  date           DateTime
  start_time     String?  // Store time as a string (HH:mm)
  end_time       String?  // Store time as a string (HH:mm)
  description    String
  latitude       Float?   
  longitude      Float?
  category       String
  participants   Int
  price          Float
  image          String?

  event_participants EventParticipant[]
  calendar_entries   Calendar[]

  creator_id    Int
  creator       User @relation("EventCreator", fields: [creator_id], references: [user_id])

  @@index([event_name])
}

model EventParticipant {
  event_participant_id Int   @id @default(autoincrement())
  event_id             Int
  user_id              Int
  qr_code              String? // New field to store QR code data

  event Event @relation(fields: [event_id], references: [event_id])
  user  User  @relation(fields: [user_id], references: [user_id])

  @@index([event_id, user_id])
}

model Calendar {
  calendar_id Int      @id @default(autoincrement())
  user_id     Int
  event_id    Int
  date        DateTime

  user  User  @relation(fields: [user_id], references: [user_id])
  event Event @relation(fields: [event_id], references: [event_id])

  @@index([user_id, event_id])
}

model Chat {
  chat_id         Int       @id @default(autoincrement())
  is_group        Boolean
  created_at      DateTime  @default(now())
  
  // Nouvelle fonctionnalité d'appel
  call_type       CallType?  @default(NONE)
  call_status     CallStatus? 
  call_initiator_id Int?
  call_start_time DateTime?
  call_end_time   DateTime?
  call_duration   Float?    // Durée en secondes
  matches         Match[]

  // Relation avec l'initiateur de l'appel
  call_initiator  User?     @relation("ChatInitiator", fields: [call_initiator_id], references: [user_id])
  
  messages        Message[]
  chat_members    ChatMember[]
  
  // New relation for video calls
  video_calls     VideoCall[]
}

model ChatMember {
  chat_member_id Int   @id @default(autoincrement())
  chat_id        Int
  user_id        Int

  chat Chat @relation(fields: [chat_id], references: [chat_id])
  user User @relation(fields: [user_id], references: [user_id])

  @@index([chat_id, user_id])
}

model Message {
  message_id    Int      @id @default(autoincrement())
  chat_id       Int
  sender_id     Int?     // Note the nullable
  content       String
  message_type  MessageType
  sent_at       DateTime @default(now())

  // Pour les messages vocaux
  voice_duration Float?   
  voice_file_url String?  // URL du fichier audio

  chat    Chat  @relation(fields: [chat_id], references: [chat_id])
  sender  User?  @relation("MessageSender", fields: [sender_id], references: [user_id])

  @@index([chat_id])
  @@index([sender_id])
}

model Achievement {
  achievement_id    Int      @id @default(autoincrement())
  user_id          Int
  achievement_name String
  description      String?
  achieved_at      DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}
model MarketplaceProduct {
  product_id   Int      @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  discount     Float    @default(0)
  image_url    String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  sport_id     Int     
  rating       Int      @default(5)

  sport        Sport    @relation(fields: [sport_id], references: [sport_id])
  cart_items   CartItem[]
  favorites    Favorite[] // Add this new relation

  @@index([sport_id])
}


model Cart {
  cart_id     Int        @id @default(autoincrement())
  user_id     Int        @unique
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  user        User       @relation(fields: [user_id], references: [user_id])
  items       CartItem[]
}
model Favorite {
  favorite_id Int      @id @default(autoincrement())
  user_id     Int
  product_id  Int
  created_at  DateTime @default(now())

  user        User               @relation(fields: [user_id], references: [user_id])
  product     MarketplaceProduct @relation(fields: [product_id], references: [product_id])

  @@unique([user_id, product_id]) // Prevent duplicate favorites
  @@index([user_id])
  @@index([product_id])
}


model CartItem {
  cart_item_id Int    @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int
  price        Float
  subtotal     Float

  cart         Cart    @relation(fields: [cart_id], references: [cart_id])
  product      MarketplaceProduct @relation(fields: [product_id], references: [product_id])

  @@index([cart_id])
  @@index([product_id])
}

model Report {
  report_id        Int      @id @default(autoincrement())
  reported_user_id Int
  reported_by      Int
  reason           String
  report_date      DateTime @default(now())
  status           String   // Pending, Resolved

  reported_user    User     @relation("ReportsReceived", fields: [reported_user_id], references: [user_id])
  reporter         User     @relation("ReportsSent", fields: [reported_by], references: [user_id])

  @@index([reported_user_id])
  @@index([reported_by])
}

model PointsLog {
  id        Int      @id @default(autoincrement())
  user_id   Int
  activity  String   // EVENT_PARTICIPATION, PURCHASE, etc.
  points    Int
  timestamp DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id        Int
  type           NotificationType @default(GENERAL)   
  title          String
  content        String
  is_read        Boolean          @default(false)
  created_at     DateTime         @default(now())
  action_url     String?  
  match_id       Int?             

  user           User             @relation("UserNotifications", fields: [user_id], references: [user_id])
  match          Match?           @relation("MatchNotifications", fields: [match_id], references: [match_id])

  @@index([user_id])
  @@index([match_id])
}

model Match {
  match_id         Int            @id @default(autoincrement())
  user_id_1        Int
  user_id_2        Int
  sport_id         Int
  status           MatchStatus
  chat_id          Int?

  matched_at       DateTime       @default(now())
  accepted_at      DateTime?
  rejected_at      DateTime?

  user_1           User          @relation("User1Matches", fields: [user_id_1], references: [user_id])
  user_2           User          @relation("User2Matches", fields: [user_id_2], references: [user_id])
  sport            Sport         @relation(fields: [sport_id], references: [sport_id])
  chat             Chat?         @relation(fields: [chat_id], references: [chat_id])
  notifications    Notification[] @relation("MatchNotifications")

  @@index([user_id_1])
  @@index([user_id_2])
  @@index([sport_id])
  @@index([chat_id])
}

model VideoCall {
  id              Int       @id @default(autoincrement())
  chat_id         Int
  channel_name    String    @unique
  initiator_id    Int
  participant_id  Int
  status          VideoCallStatus
  started_at      DateTime  @default(now())
  ended_at        DateTime?

  chat            Chat      @relation(fields: [chat_id], references: [chat_id])
  initiator       User      @relation("CallInitiator", fields: [initiator_id], references: [user_id])
  participant     User      @relation("CallParticipant", fields: [participant_id], references: [user_id])

  @@index([chat_id])
  @@index([initiator_id])
  @@index([participant_id])
}